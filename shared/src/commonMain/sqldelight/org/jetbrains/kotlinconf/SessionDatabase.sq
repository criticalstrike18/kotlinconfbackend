-- Session Table Definition
CREATE TABLE SessionTable (
    id TEXT NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    roomId INTEGER REFERENCES ConferenceRoomsTable(id),
    startsAt INTEGER NOT NULL,
    endsAt INTEGER NOT NULL,
    isServiceSession INTEGER NOT NULL DEFAULT 0,
    isPlenumSession INTEGER NOT NULL DEFAULT 0,
    status TEXT DEFAULT 'draft',
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Session Table Queries
insertSession:
INSERT INTO SessionTable(
    id, title, description, roomId, startsAt, endsAt,
    isServiceSession, isPlenumSession, status,isPending
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateSession:
UPDATE SessionTable
SET title = :title,
    description = :description,
    roomId = :roomId,
    startsAt = :startsAt,
    endsAt = :endsAt,
    isServiceSession = :isServiceSession,
    isPlenumSession = :isPlenumSession,
    status = :status,
    isPending = 1
WHERE id = :sessionId;

updateSessionId:
UPDATE SessionTable
SET id = :newId
WHERE id = :oldId;

selectAllSessions:
SELECT * FROM SessionTable;

getPendingSessions:
SELECT * FROM SessionTable WHERE isPending = 1;

markSessionSynced:
UPDATE SessionTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :sessionId;


-- Conference Speakers Table Definition
CREATE TABLE ConferenceSpeakersTable (
    id TEXT NOT NULL PRIMARY KEY,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    bio TEXT,
    tagLine TEXT,
    profilePicture TEXT,
    isTopSpeaker INTEGER DEFAULT 0,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Conference Speakers Queries
insertSpeaker:
INSERT INTO ConferenceSpeakersTable(id, firstName, lastName, bio, tagLine, profilePicture, isTopSpeaker)
VALUES (?, ?, ?, ?, ?, ?, ?);

selectAllSpeakers:
SELECT * FROM ConferenceSpeakersTable;

getPendingSpeakers:
SELECT * FROM ConferenceSpeakersTable WHERE isPending = 1;

markSpeakerSynced:
UPDATE ConferenceSpeakersTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :speakerId;

-- Conference Rooms Table Definition
CREATE TABLE ConferenceRoomsTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    sort INTEGER,
    isPending INTEGER NOT NULL DEFAULT 0,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Conference Rooms Queries
insertRoom:
INSERT INTO ConferenceRoomsTable(id,name, sort)
VALUES (?, ?, ?);

insertRoomThroughForm:
INSERT INTO ConferenceRoomsTable(name, sort, isPending)
VALUES (?, ?, ?);

selectAllRooms:
SELECT * FROM ConferenceRoomsTable;

updateRoomId:
UPDATE ConferenceRoomsTable
SET id = :newRoomId
WHERE id = :oldRoomId;

getPendingRooms:
SELECT * FROM ConferenceRoomsTable WHERE isPending = 1;

markRoomSynced:
UPDATE ConferenceRoomsTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :roomId;

-- Conference Categories Table Definition
CREATE TABLE ConferenceCategoriesTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    sort INTEGER,
    type TEXT,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Conference Categories Queries
insertCategory:
INSERT INTO ConferenceCategoriesTable(id, title, sort, type)
VALUES (?, ?, ?, ?);

selectAllCategories:
SELECT * FROM ConferenceCategoriesTable;

getPendingCategories:
SELECT * FROM ConferenceCategoriesTable WHERE isPending = 1;

markCategorySynced:
UPDATE ConferenceCategoriesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :categoryId;

-- Session Speakers Junction Table Definition
CREATE TABLE SessionSpeakersTable (
    sessionId TEXT NOT NULL,
    speakerId TEXT NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    PRIMARY KEY (sessionId, speakerId),
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id),
    FOREIGN KEY (speakerId) REFERENCES ConferenceSpeakersTable(id)
);

-- Session Speakers Junction Queries
insertSessionSpeaker:
INSERT INTO SessionSpeakersTable(sessionId, speakerId)
VALUES (?, ?);

getSessionSpeakers:
SELECT s.*
FROM ConferenceSpeakersTable s
JOIN SessionSpeakersTable ss ON s.id = ss.speakerId
WHERE ss.sessionId = :sessionId;

updateSessionSpeakersId:
UPDATE SessionSpeakersTable
SET sessionId = :newSessionId
WHERE sessionId = :oldSessionId;

getPendingSessionSpeakers:
SELECT * FROM SessionSpeakersTable WHERE isPending = 1;

markSessionSpeakerSynced:
UPDATE SessionSpeakersTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId AND speakerId = :speakerId;

-- Session Categories Junction Table Definition
CREATE TABLE SessionCategoriesTable (
    sessionId TEXT NOT NULL,
    categoryId INTEGER NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    PRIMARY KEY (sessionId, categoryId),
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id),
    FOREIGN KEY (categoryId) REFERENCES ConferenceCategoriesTable(id)
);

-- Session Categories Junction Queries
insertSessionCategory:
INSERT INTO SessionCategoriesTable(sessionId, categoryId)
VALUES (?, ?);

getSessionCategories:
SELECT c.*
FROM ConferenceCategoriesTable c
JOIN SessionCategoriesTable sc ON c.id = sc.categoryId
WHERE sc.sessionId = :sessionId;

updateSessionCategoriesId:
UPDATE SessionCategoriesTable
SET sessionId = :newSessionId
WHERE sessionId = :oldSessionId;

getPendingSessionCategories:
SELECT * FROM SessionCategoriesTable WHERE isPending = 1;

markSessionCategorySynced:
UPDATE SessionCategoriesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId AND categoryId = :categoryId;


-- Votes Table
CREATE TABLE VotesTable (
    sessionId TEXT NOT NULL PRIMARY KEY,
    score INTEGER NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id)
);

-- Votes Queries
insertVote:
INSERT OR REPLACE INTO VotesTable(sessionId, score)
VALUES (?, ?);

getAllVotes:
SELECT * FROM VotesTable;

getPendingVotes:
SELECT * FROM VotesTable WHERE isPending = 1;

markVoteSynced:
UPDATE VotesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId;


-- Feedback Table Definition
CREATE TABLE FeedbackTable (
    sessionId TEXT NOT NULL PRIMARY KEY,
    feedbackText TEXT NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id)
);

-- Feedback Queries
insertFeedback:
INSERT OR REPLACE INTO FeedbackTable(sessionId, feedbackText)
VALUES (?, ?);

getAllFeedback:
SELECT * FROM FeedbackTable;

getPendingFeedback:
SELECT * FROM FeedbackTable WHERE isPending = 1;

markFeedbackSynced:
UPDATE FeedbackTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId;


-- Favorites Table Definition
CREATE TABLE FavoritesTable (
    sessionId TEXT NOT NULL PRIMARY KEY,
    isFavorite INTEGER NOT NULL DEFAULT 0,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id)
);

-- Favorites Queries
insertFavorite:
INSERT OR REPLACE INTO FavoritesTable(sessionId, isFavorite)
VALUES (?, ?);

getAllFavorites:
SELECT * FROM FavoritesTable;

getPendingFavorites:
SELECT * FROM FavoritesTable WHERE isPending = 1;

markFavoriteSynced:
UPDATE FavoritesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId;


-- Session Table Deletion
deleteCompletedSessions:
DELETE FROM SessionTable
WHERE isPending = 0;

-- Votes Table Deletion
deleteCompletedVotes:
DELETE FROM VotesTable
WHERE isPending = 0;

-- Feedback Table Deletion
deleteCompletedFeedback:
DELETE FROM FeedbackTable
WHERE isPending = 0;

-- Favorites Table Deletion
deleteCompletedFavorites:
DELETE FROM FavoritesTable
WHERE isPending = 0;

-- Conference Speakers Table Deletion
deleteCompletedSpeakers:
DELETE FROM ConferenceSpeakersTable
WHERE isPending = 0;

-- Conference Rooms Table Deletion
deleteCompletedRooms:
DELETE FROM ConferenceRoomsTable
WHERE isPending = 0;

-- Conference Categories Table Deletion
deleteCompletedCategories:
DELETE FROM ConferenceCategoriesTable
WHERE isPending = 0;

-- Session Speakers Junction Table Deletion
deleteCompletedSessionSpeakers:
DELETE FROM SessionSpeakersTable
WHERE isPending = 0;

-- Session Categories Junction Table Deletion
deleteCompletedSessionCategories:
DELETE FROM SessionCategoriesTable
WHERE isPending = 0;

--
-- PODCAST DB
--

--Podcast Channels DB
CREATE TABLE PodcastChannels (
    id INTEGER NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    link TEXT NOT NULL,
    description TEXT NOT NULL,
    copyright TEXT,
    language TEXT NOT NULL,
    author TEXT NOT NULL,
    ownerEmail TEXT NOT NULL,
    ownerName TEXT NOT NULL,
    imageUrl TEXT NOT NULL,
    lastBuildDate INTEGER NOT NULL
);

CREATE TABLE PodcastEpisodes (
    id INTEGER NOT NULL PRIMARY KEY,
    channelId INTEGER NOT NULL,
    guid TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    link TEXT NOT NULL,
    pubDate INTEGER NOT NULL,
    duration INTEGER NOT NULL,
    explicit INTEGER NOT NULL,
    imageUrl TEXT,
    mediaUrl TEXT NOT NULL,
    mediaType TEXT NOT NULL,
    mediaLength INTEGER NOT NULL
);

CREATE TABLE PodcastChannelCategories (
   id INTEGER NOT NULL PRIMARY KEY,
   name TEXT NOT NULL UNIQUE
);

CREATE TABLE PodcastEpisodeCategories (
   id INTEGER NOT NULL PRIMARY KEY,
   name TEXT NOT NULL UNIQUE
);

CREATE TABLE ChannelCategoryMap (
    channelId INTEGER NOT NULL,
    categoryId INTEGER NOT NULL,
    PRIMARY KEY (channelId, categoryId),
    FOREIGN KEY (channelId) REFERENCES PodcastChannels(id),
    FOREIGN KEY (categoryId) REFERENCES PodcastChannelCategories(id)
);

CREATE TABLE EpisodeCategoryMap (
    episodeId INTEGER NOT NULL,
    categoryId INTEGER NOT NULL,
    PRIMARY KEY (episodeId, categoryId),
    FOREIGN KEY (episodeId) REFERENCES PodcastEpisodes(id),
    FOREIGN KEY (categoryId) REFERENCES PodcastEpisodeCategories(id)
);

-- Upsert or Insert queries for Channels
insertChannel:
INSERT INTO PodcastChannels(
  id, title, link, description, copyright,
  language, author, ownerEmail, ownerName,
  imageUrl, lastBuildDate
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateChannel:
UPDATE PodcastChannels
SET
  title = ?,
  link = ?,
  description = ?,
  copyright = ?,
  language = ?,
  author = ?,
  ownerEmail = ?,
  ownerName = ?,
  imageUrl = ?,
  lastBuildDate = ?
WHERE id = ?;

selectChannelById:
SELECT *
FROM PodcastChannels
WHERE id = ?;

selectAllChannels:
SELECT *
FROM PodcastChannels;


selectChannelByEpisodeId:
SELECT c.*
FROM PodcastChannels c
INNER JOIN PodcastEpisodes e ON e.channelId = c.id
WHERE e.id = ?;

getAllChannelDetails:
SELECT
    c.*,
    COUNT(DISTINCT e.id) AS episodeCount,
    MIN(e.pubDate) AS earliestEpisodePubDate,
    MAX(e.pubDate) AS latestEpisodePubDate,
    GROUP_CONCAT(DISTINCT pc.name) AS categories
FROM PodcastChannels c
LEFT JOIN PodcastEpisodes e ON e.channelId = c.id
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
GROUP BY c.id;

getAllChannelDetailsById:
SELECT
    c.*,
    COUNT(DISTINCT e.id) AS episodeCount,
    MIN(e.pubDate) AS earliestEpisodePubDate,
    MAX(e.pubDate) AS latestEpisodePubDate,
    GROUP_CONCAT(DISTINCT pc.name) AS categories
FROM PodcastChannels c
LEFT JOIN PodcastEpisodes e ON e.channelId = c.id
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
WHERE c.id = :channelId
GROUP BY c.id;

-- Similarly for episodes
insertEpisode:
INSERT INTO PodcastEpisodes(
  id, channelId, guid, title, description, link,
  pubDate, duration, explicit, imageUrl, mediaUrl,
  mediaType, mediaLength
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateEpisode:
UPDATE PodcastEpisodes
SET
  channelId = ?,
  guid = ?,
  title = ?,
  description = ?,
  link = ?,
  pubDate = ?,
  duration = ?,
  explicit = ?,
  imageUrl = ?,
  mediaUrl = ?,
  mediaType = ?,
  mediaLength = ?
WHERE id = ?;

selectEpisodesById:
SELECT *
FROM PodcastEpisodes
WHERE id = ?;

selectEpisodesByGuid:
SELECT *
FROM PodcastEpisodes
WHERE guid = ?;

selectEpisodesByChannelId:
SELECT *
FROM PodcastEpisodes
WHERE channelId = ?;

getChannelEpisodeTags:
SELECT DISTINCT pc.name
FROM PodcastEpisodeCategories pc
JOIN EpisodeCategoryMap ecm ON pc.id = ecm.categoryId
JOIN PodcastEpisodes e ON ecm.episodeId = e.id
WHERE e.channelId = ?;

getEpisodeCategoriesById:
SELECT em.categories
FROM (
    SELECT e.id, GROUP_CONCAT(c.name) AS categories
    FROM PodcastEpisodes e
    LEFT JOIN EpisodeCategoryMap cm ON e.id = cm.episodeId
    LEFT JOIN PodcastEpisodeCategories c ON cm.categoryId = c.id
    WHERE e.id = ?
    GROUP BY e.id
) em;

getEpisodeTagsForEpisodes:
SELECT DISTINCT pc.name
FROM PodcastEpisodeCategories pc
JOIN EpisodeCategoryMap ecm ON pc.id = ecm.categoryId
WHERE ecm.episodeId IN ?;

getEpisodeTagsById:
SELECT DISTINCT pc.name
FROM PodcastEpisodeCategories pc
JOIN EpisodeCategoryMap ecm ON pc.id = ecm.categoryId
WHERE ecm.episodeId = ?;

-- Enhanced Episode Queries
getEpisodeWithCategories:
SELECT
    e.*,
    GROUP_CONCAT(pc.name) AS categories
FROM PodcastEpisodes e
LEFT JOIN EpisodeCategoryMap ecm ON e.id = ecm.episodeId
LEFT JOIN PodcastEpisodeCategories pc ON ecm.categoryId = pc.id
WHERE e.id = ?
GROUP BY e.id;

getEpisodesByChannelWithCategories:
SELECT
    e.*,
    GROUP_CONCAT(pc.name) AS categories
FROM PodcastEpisodes e
LEFT JOIN EpisodeCategoryMap ecm ON e.id = ecm.episodeId
LEFT JOIN PodcastEpisodeCategories pc ON ecm.categoryId = pc.id
WHERE e.channelId = ?
GROUP BY e.id;

--Categories queries
-- Update category insertion queries
insertChannelCategory:
INSERT OR IGNORE INTO PodcastChannelCategories(name) VALUES (?);

insertEpisodeCategory:
INSERT OR IGNORE INTO PodcastEpisodeCategories(name) VALUES (?);

-- Update category selection queries
selectChannelCategoryByName:
SELECT id, name FROM PodcastChannelCategories WHERE name = ?;

selectEpisodeCategoryByName:
SELECT id, name FROM PodcastEpisodeCategories WHERE name = ?;

-- Channel Category Mapping Operations
insertChannelCategoryMap:
INSERT OR IGNORE INTO ChannelCategoryMap(channelId, categoryId) VALUES (?, ?);

selectChannelCategories:
SELECT pc.name
FROM PodcastChannelCategories pc
INNER JOIN ChannelCategoryMap ccm ON pc.id = ccm.categoryId
WHERE ccm.channelId = ?;

-- Episode Category Mapping Operations
insertEpisodeCategoryMap:
INSERT OR IGNORE INTO EpisodeCategoryMap(episodeId, categoryId) VALUES (?, ?);

selectEpisodeCategories:
SELECT pc.name
FROM PodcastEpisodeCategories pc
INNER JOIN EpisodeCategoryMap ecm ON pc.id = ecm.categoryId
WHERE ecm.episodeId = ?;

getAllEpisodesDetails:
SELECT
    e.*,
    c.title channelTitle,
    GROUP_CONCAT(pc.name) categories
FROM PodcastEpisodes e
LEFT JOIN PodcastChannels c ON e.channelId = c.id
LEFT JOIN EpisodeCategoryMap ecm ON e.id = ecm.episodeId
LEFT JOIN PodcastEpisodeCategories pc ON ecm.categoryId = pc.id
GROUP BY e.id;

-- Paginated channel queries
-- Tag queries
getAllSessionTags:
SELECT DISTINCT title FROM ConferenceCategoriesTable;

getAllChannelCategories:
SELECT DISTINCT pc.name
FROM PodcastChannelCategories pc
JOIN ChannelCategoryMap ccm ON pc.id = ccm.categoryId;

getAllEpisodeCategories:
SELECT DISTINCT pc.name
FROM PodcastEpisodeCategories pc
JOIN EpisodeCategoryMap ecm ON pc.id = ecm.categoryId;

-- Optimized search queries for channels
searchChannelsPaginated:
SELECT
    c.id,
    c.title,
    c.description,
    c.author,
    c.imageUrl,
    COUNT(DISTINCT e.id) AS episodeCount,
    GROUP_CONCAT(DISTINCT pc.name) AS categories
FROM PodcastChannels c
LEFT JOIN PodcastEpisodes e ON e.channelId = c.id
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
WHERE (c.title LIKE :query OR c.description LIKE :query OR c.author LIKE :query)
AND (:hasTagFilter = 0 OR EXISTS (
    SELECT 1
    FROM ChannelCategoryMap cm
    JOIN PodcastChannelCategories cat ON cm.categoryId = cat.id
    WHERE cm.channelId = c.id AND cat.name IN :tags
))
GROUP BY c.id
ORDER BY c.title
LIMIT :limit OFFSET :offset;

countSearchChannels:
SELECT COUNT(DISTINCT c.id)
FROM PodcastChannels c
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
WHERE (c.title LIKE :query OR c.description LIKE :query OR c.author LIKE :query)
AND (:hasTagFilter = 0 OR EXISTS (
    SELECT 1
    FROM ChannelCategoryMap cm
    JOIN PodcastChannelCategories cat ON cm.categoryId = cat.id
    WHERE cm.channelId = c.id AND cat.name IN :tags
));

-- Optimized search queries for episodes
-- Define a more efficient query without GROUP_CONCAT
searchEpisodesBasicPaginated:
SELECT
    e.id,
    e.channelId,
    e.title,
    e.description,
    e.imageUrl,
    e.pubDate,
    e.duration,
    c.title AS channelTitle
FROM PodcastEpisodes e
JOIN PodcastChannels c ON e.channelId = c.id
WHERE (e.title LIKE :query OR e.description LIKE :query)
AND (:hasTagFilter = 0 OR EXISTS (
    SELECT 1
    FROM EpisodeCategoryMap em
    JOIN PodcastEpisodeCategories cat ON em.categoryId = cat.id
    WHERE em.episodeId = e.id AND cat.name IN :tags
))
ORDER BY e.pubDate DESC
LIMIT :limit OFFSET :offset;

countSearchEpisodes:
SELECT COUNT(DISTINCT e.id)
FROM PodcastEpisodes e
LEFT JOIN EpisodeCategoryMap ecm ON e.id = ecm.episodeId
LEFT JOIN PodcastEpisodeCategories pc ON ecm.categoryId = pc.id
WHERE (e.title LIKE :query OR e.description LIKE :query)
AND (:hasTagFilter = 0 OR EXISTS (
    SELECT 1
    FROM EpisodeCategoryMap em
    JOIN PodcastEpisodeCategories cat ON em.categoryId = cat.id
    WHERE em.episodeId = e.id AND cat.name IN :tags
));

-- Pagination queries for channels and episodes
getChannelsPaginated:
SELECT
    c.*,
    COUNT(DISTINCT e.id) AS episodeCount,
    MIN(e.pubDate) AS earliestEpisodePubDate,
    MAX(e.pubDate) AS latestEpisodePubDate,
    GROUP_CONCAT(DISTINCT pc.name) AS categories
FROM PodcastChannels c
LEFT JOIN PodcastEpisodes e ON e.channelId = c.id
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
GROUP BY c.id
ORDER BY c.title
LIMIT :limit OFFSET :offset;

getChannelCount:
SELECT COUNT(*) FROM PodcastChannels;

getEpisodesForChannelPaginated:
SELECT *
FROM PodcastEpisodes
WHERE channelId = :channelId
ORDER BY pubDate DESC
LIMIT :limit OFFSET :offset;

getEpisodeCountForChannel:
SELECT COUNT(*) FROM PodcastEpisodes WHERE channelId = :channelId;

-- PlayBackState Table Definition

CREATE TABLE PlaybackState (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    episodeId TEXT,
    channelId TEXT,  -- Adding channelId for faster channel loading
    position INTEGER NOT NULL,
    url TEXT,
    speed REAL NOT NULL,
    isBoostEnabled INTEGER NOT NULL,
    timestamp INTEGER NOT NULL DEFAULT (strftime('%s','now'))
);

selectLastPlaybackState:
SELECT * FROM PlaybackState
ORDER BY timestamp DESC
LIMIT 1;

insertPlaybackState:
INSERT INTO PlaybackState (
    episodeId,
    channelId,
    position,
    url,
    speed,
    isBoostEnabled
) VALUES (?, ?, ?, ?, ?, ?);

CREATE TABLE EpisodeProgress (
  episode_id INTEGER NOT NULL PRIMARY KEY,
  position_ms INTEGER NOT NULL,
  last_updated INTEGER NOT NULL
);

updateEpisodeProgress:
UPDATE EpisodeProgress
SET position_ms = :position_ms,
    last_updated = :last_updated
WHERE episode_id = :episode_id;

insertEpisodeProgress:
INSERT INTO EpisodeProgress (episode_id, position_ms, last_updated)
VALUES (:episode_id, :position_ms, :last_updated);

selectEpisodeProgressById:
SELECT episode_id, position_ms, last_updated
FROM EpisodeProgress
WHERE episode_id = :episode_id;

selectChanges:
SELECT changes();

-- Create indexes for better search performance
-- Create indexes for optimized search performance
createSearchIndexes:
-- Channel indexes
CREATE INDEX IF NOT EXISTS idx_podcast_channel_title ON PodcastChannels(title);
CREATE INDEX IF NOT EXISTS idx_podcast_channel_desc ON PodcastChannels(description);
CREATE INDEX IF NOT EXISTS idx_podcast_channel_author ON PodcastChannels(author);

-- Episode indexes
CREATE INDEX IF NOT EXISTS idx_episode_pubdate ON PodcastEpisodes(pubDate DESC);
CREATE INDEX IF NOT EXISTS idx_episode_title ON PodcastEpisodes(title);
CREATE INDEX IF NOT EXISTS idx_episode_channel ON PodcastEpisodes(channelId);

-- Category indexes (critical for category search optimization)
CREATE INDEX IF NOT EXISTS idx_episode_categories_name ON PodcastEpisodeCategories(name);
CREATE INDEX IF NOT EXISTS idx_channel_categories_name ON PodcastChannelCategories(name);

-- Mapping table indexes (for efficient joins)
CREATE INDEX IF NOT EXISTS idx_episodecategorymap_combined ON EpisodeCategoryMap(episodeId, categoryId);
CREATE INDEX IF NOT EXISTS idx_episodecategorymap_episodeid ON EpisodeCategoryMap(episodeId);
CREATE INDEX IF NOT EXISTS idx_episodecategorymap_categoryid ON EpisodeCategoryMap(categoryId);
CREATE INDEX IF NOT EXISTS idx_channelcategorymap_combined ON ChannelCategoryMap(channelId, categoryId);
CREATE INDEX IF NOT EXISTS idx_channel_category ON ChannelCategoryMap(channelId);

-- Session indexes
CREATE INDEX IF NOT EXISTS idx_session_title ON SessionTable(title);
CREATE INDEX IF NOT EXISTS idx_session_desc ON SessionTable(description);

-- Diagnostics and Optimization --

optimizeDatabase:
PRAGMA analysis_limit=1000;
PRAGMA optimize;
PRAGMA vacuum;


-- Cursor-based channel pagination
getChannelsCursor:
SELECT
    c.*,
    COUNT(DISTINCT e.id) AS episodeCount,
    MIN(e.pubDate) AS earliestEpisodePubDate,
    MAX(e.pubDate) AS latestEpisodePubDate,
    GROUP_CONCAT(DISTINCT pc.name) AS categories
FROM PodcastChannels c
LEFT JOIN PodcastEpisodes e ON e.channelId = c.id
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
WHERE (:cursor IS NULL OR c.id > :cursor)
GROUP BY c.id
ORDER BY c.id
LIMIT :limit;

getChannelsCursorBackward:
SELECT
    c.*,
    COUNT(DISTINCT e.id) AS episodeCount,
    MIN(e.pubDate) AS earliestEpisodePubDate,
    MAX(e.pubDate) AS latestEpisodePubDate,
    GROUP_CONCAT(DISTINCT pc.name) AS categories
FROM PodcastChannels c
LEFT JOIN PodcastEpisodes e ON e.channelId = c.id
LEFT JOIN ChannelCategoryMap ccm ON c.id = ccm.channelId
LEFT JOIN PodcastChannelCategories pc ON ccm.categoryId = pc.id
WHERE c.id < :cursor
GROUP BY c.id
ORDER BY c.id DESC
LIMIT :limit;

-- Cursor-based episode pagination by channel
getEpisodesForChannelCursor:
SELECT e.*
FROM PodcastEpisodes e
WHERE e.channelId = :channelId
AND (:cursor IS NULL OR e.pubDate < :cursor)
ORDER BY e.pubDate DESC
LIMIT :limit;

getEpisodesForChannelCursorBackward:
SELECT e.*
FROM PodcastEpisodes e
WHERE e.channelId = :channelId
AND e.pubDate > :cursor
ORDER BY e.pubDate ASC
LIMIT :limit;

-- Channel tag search that returns standard channel model
getChannelIdsByTags:
SELECT DISTINCT cm.channelId
FROM ChannelCategoryMap cm
JOIN PodcastChannelCategories cat ON cm.categoryId = cat.id
WHERE cat.name IN ?;

-- Channel search with tag filtering
getChannelsWithFilters:
SELECT c.*,
  (SELECT COUNT(*) FROM PodcastEpisodes WHERE channelId = c.id) AS episodeCount,
  (SELECT GROUP_CONCAT(pc.name) FROM PodcastChannelCategories pc
   JOIN ChannelCategoryMap ccm ON pc.id = ccm.categoryId
   WHERE ccm.channelId = c.id) AS categories
FROM PodcastChannels c
WHERE (:useTagFilter = 0
       OR c.id IN (
         SELECT DISTINCT cm.channelId FROM ChannelCategoryMap cm
         JOIN PodcastChannelCategories cat ON cm.categoryId = cat.id
         WHERE cat.name IN :tags
       ))
  AND (:useTextFilter = 0 OR (c.title LIKE '%' || :query || '%' OR c.description LIKE '%' || :query || '%' OR c.author LIKE '%' || :query || '%'))
  AND (:backward = 0 OR c.id < :cursor)
  AND (:backward = 1 OR :cursor IS NULL OR c.id > :cursor)
ORDER BY c.id DESC
LIMIT :limit;

getEpisodeIdsByTags:
SELECT DISTINCT em.episodeId
FROM EpisodeCategoryMap em
JOIN PodcastEpisodeCategories cat ON em.categoryId = cat.id
WHERE cat.name IN ?;

-- Optimized episode search query with pagination & reduced data fetching
getEpisodesWithFilters:
SELECT
  e.id, e.channelId, e.title, e.description, e.pubDate, e.duration, e.imageUrl,
  c.title AS channelTitle,
  (SELECT GROUP_CONCAT(pc.name) FROM PodcastEpisodeCategories pc
   JOIN EpisodeCategoryMap ecm ON pc.id = ecm.categoryId
   WHERE ecm.episodeId = e.id LIMIT 10) AS categories
FROM PodcastEpisodes e
JOIN PodcastChannels c ON e.channelId = c.id
WHERE (:useTagFilter = 0
       OR e.id IN (
         SELECT em.episodeId FROM EpisodeCategoryMap em
         JOIN PodcastEpisodeCategories cat ON em.categoryId = cat.id
         WHERE cat.name IN :tags
         LIMIT 1000
       ))
  AND (:useTextFilter = 0 OR (e.title LIKE '%' || :query || '%'))
  AND (:backward = 0 OR e.pubDate < :cursor)
  AND (:backward = 1 OR :cursor IS NULL OR e.pubDate > :cursor)
ORDER BY e.pubDate DESC
LIMIT :limit;

-- Optimized episode search query via categories
-- Optimized episode search that matches categories first
searchEpisodesByCategory:
SELECT DISTINCT
    e.id,
    e.channelId,
    e.title,
    e.description,
    e.pubDate,
    e.duration,
    e.explicit,
    e.imageUrl,
    e.mediaUrl,
    e.mediaType,
    e.mediaLength,
    c.title AS channelTitle,
    (SELECT GROUP_CONCAT(pec.name, ', ')
     FROM EpisodeCategoryMap ecm
     JOIN PodcastEpisodeCategories pec ON ecm.categoryId = pec.id
     WHERE ecm.episodeId = e.id) AS categories
FROM PodcastEpisodes e
JOIN PodcastChannels c ON e.channelId = c.id
WHERE (:query = '' OR e.title LIKE '%' || :query || '%' OR e.description LIKE '%' || :query || '%')
AND (:hasTagFilter = 0 OR e.id IN (
    -- Simplified tag filtering that works whether query is empty or not
    SELECT DISTINCT em.episodeId
    FROM EpisodeCategoryMap em
    JOIN PodcastEpisodeCategories pec ON em.categoryId = pec.id
    WHERE pec.name IN :tags
))
AND (:cursor IS NULL OR :backward = 0 AND e.pubDate < :cursor OR :backward = 1 AND e.pubDate > :cursor)
ORDER BY CASE WHEN :backward = 1 THEN e.pubDate END ASC,
         CASE WHEN :backward = 0 THEN e.pubDate END DESC
LIMIT :limit;

-- Efficiently get all unique channel categories (limited to 200 as you liked)
getAllUniqueChannelCategories:
SELECT DISTINCT name FROM PodcastChannelCategories
ORDER BY name
LIMIT 50;

-- Efficiently get all unique episode categories (limited to 200)
getAllUniqueEpisodeCategories:
SELECT DISTINCT name FROM PodcastEpisodeCategories
ORDER BY name
LIMIT 200;

-- Get episodes across all channels with a proper SQLDelight syntax
-- Note: We don't use column alias with "as" - will use mapper instead
getEpisodesAcrossChannels:
SELECT
    e.id, e.channelId, e.guid, e.title, e.description,
    e.link, e.pubDate, e.duration, e.explicit,
    e.imageUrl, e.mediaUrl, e.mediaType, e.mediaLength,
    c.title AS channelTitle
FROM PodcastEpisodes e
JOIN PodcastChannels c ON e.channelId = c.id
WHERE (:channelId = -1 OR e.channelId = :channelId)
ORDER BY e.pubDate DESC
LIMIT :limit;

-- Efficient batch lookup of channel categories
getChannelCategories:
SELECT cm.channelId, GROUP_CONCAT(pc.name) AS categories
FROM ChannelCategoryMap cm
JOIN PodcastChannelCategories pc ON cm.categoryId = pc.id
WHERE cm.channelId IN :channelIds
GROUP BY cm.channelId;

-- Efficient batch lookup of episode categories
getEpisodeCategories:
SELECT em.episodeId, GROUP_CONCAT(pc.name) AS categories
FROM EpisodeCategoryMap em
JOIN PodcastEpisodeCategories pc ON em.categoryId = pc.id
WHERE em.episodeId IN :episodeIds
GROUP BY em.episodeId;

-- Modify the getEpisodesForChannelCursor to handle the special -1 case
getEpisodesForChannelCursor_Updated:
SELECT e.id, e.channelId, e.guid, e.title, e.description,
       e.link, e.pubDate, e.duration, e.explicit,
       e.imageUrl, e.mediaUrl, e.mediaType, e.mediaLength
FROM PodcastEpisodes e
WHERE (:channelId = -1 OR e.channelId = :channelId)
AND (:cursor IS NULL OR e.pubDate < :cursor)
ORDER BY e.pubDate DESC
LIMIT :limit;

-- Session Table Definition
CREATE TABLE SessionTable (
    id TEXT NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    roomId INTEGER REFERENCES ConferenceRoomsTable(id),
    startsAt INTEGER NOT NULL,
    endsAt INTEGER NOT NULL,
    isServiceSession INTEGER NOT NULL DEFAULT 0,
    isPlenumSession INTEGER NOT NULL DEFAULT 0,
    status TEXT DEFAULT 'draft',
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Session Table Queries
insertSession:
INSERT INTO SessionTable(
    id, title, description, roomId, startsAt, endsAt,
    isServiceSession, isPlenumSession, status,isPending
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateSession:
UPDATE SessionTable
SET title = :title,
    description = :description,
    roomId = :roomId,
    startsAt = :startsAt,
    endsAt = :endsAt,
    isServiceSession = :isServiceSession,
    isPlenumSession = :isPlenumSession,
    status = :status,
    isPending = 1
WHERE id = :sessionId;

updateSessionId:
UPDATE SessionTable
SET id = :newId
WHERE id = :oldId;

selectAllSessions:
SELECT * FROM SessionTable;

getPendingSessions:
SELECT * FROM SessionTable WHERE isPending = 1;

markSessionSynced:
UPDATE SessionTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :sessionId;


-- Conference Speakers Table Definition
CREATE TABLE ConferenceSpeakersTable (
    id TEXT NOT NULL PRIMARY KEY,
    firstName TEXT NOT NULL,
    lastName TEXT NOT NULL,
    bio TEXT,
    tagLine TEXT,
    profilePicture TEXT,
    isTopSpeaker INTEGER DEFAULT 0,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Conference Speakers Queries
insertSpeaker:
INSERT INTO ConferenceSpeakersTable(id, firstName, lastName, bio, tagLine, profilePicture, isTopSpeaker)
VALUES (?, ?, ?, ?, ?, ?, ?);

selectAllSpeakers:
SELECT * FROM ConferenceSpeakersTable;

getPendingSpeakers:
SELECT * FROM ConferenceSpeakersTable WHERE isPending = 1;

markSpeakerSynced:
UPDATE ConferenceSpeakersTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :speakerId;

-- Conference Rooms Table Definition
CREATE TABLE ConferenceRoomsTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    sort INTEGER,
    isPending INTEGER NOT NULL DEFAULT 0,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Conference Rooms Queries
insertRoom:
INSERT INTO ConferenceRoomsTable(id,name, sort)
VALUES (?, ?, ?);

insertRoomThroughForm:
INSERT INTO ConferenceRoomsTable(name, sort, isPending)
VALUES (?, ?, ?);

selectAllRooms:
SELECT * FROM ConferenceRoomsTable;

updateRoomId:
UPDATE ConferenceRoomsTable
SET id = :newRoomId
WHERE id = :oldRoomId;

getPendingRooms:
SELECT * FROM ConferenceRoomsTable WHERE isPending = 1;

markRoomSynced:
UPDATE ConferenceRoomsTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :roomId;

-- Conference Categories Table Definition
CREATE TABLE ConferenceCategoriesTable (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    sort INTEGER,
    type TEXT,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL
);

-- Conference Categories Queries
insertCategory:
INSERT INTO ConferenceCategoriesTable(id, title, sort, type)
VALUES (?, ?, ?, ?);

selectAllCategories:
SELECT * FROM ConferenceCategoriesTable;

getPendingCategories:
SELECT * FROM ConferenceCategoriesTable WHERE isPending = 1;

markCategorySynced:
UPDATE ConferenceCategoriesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE id = :categoryId;

-- Session Speakers Junction Table Definition
CREATE TABLE SessionSpeakersTable (
    sessionId TEXT NOT NULL,
    speakerId TEXT NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    PRIMARY KEY (sessionId, speakerId),
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id),
    FOREIGN KEY (speakerId) REFERENCES ConferenceSpeakersTable(id)
);

-- Session Speakers Junction Queries
insertSessionSpeaker:
INSERT INTO SessionSpeakersTable(sessionId, speakerId)
VALUES (?, ?);

getSessionSpeakers:
SELECT s.*
FROM ConferenceSpeakersTable s
JOIN SessionSpeakersTable ss ON s.id = ss.speakerId
WHERE ss.sessionId = :sessionId;

updateSessionSpeakersId:
UPDATE SessionSpeakersTable
SET sessionId = :newSessionId
WHERE sessionId = :oldSessionId;

getPendingSessionSpeakers:
SELECT * FROM SessionSpeakersTable WHERE isPending = 1;

markSessionSpeakerSynced:
UPDATE SessionSpeakersTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId AND speakerId = :speakerId;

-- Session Categories Junction Table Definition
CREATE TABLE SessionCategoriesTable (
    sessionId TEXT NOT NULL,
    categoryId INTEGER NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    PRIMARY KEY (sessionId, categoryId),
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id),
    FOREIGN KEY (categoryId) REFERENCES ConferenceCategoriesTable(id)
);

-- Session Categories Junction Queries
insertSessionCategory:
INSERT INTO SessionCategoriesTable(sessionId, categoryId)
VALUES (?, ?);

getSessionCategories:
SELECT c.*
FROM ConferenceCategoriesTable c
JOIN SessionCategoriesTable sc ON c.id = sc.categoryId
WHERE sc.sessionId = :sessionId;

updateSessionCategoriesId:
UPDATE SessionCategoriesTable
SET sessionId = :newSessionId
WHERE sessionId = :oldSessionId;

getPendingSessionCategories:
SELECT * FROM SessionCategoriesTable WHERE isPending = 1;

markSessionCategorySynced:
UPDATE SessionCategoriesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId AND categoryId = :categoryId;


-- Votes Table
CREATE TABLE VotesTable (
    sessionId TEXT NOT NULL PRIMARY KEY,
    score INTEGER NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id)
);

-- Votes Queries
insertVote:
INSERT OR REPLACE INTO VotesTable(sessionId, score)
VALUES (?, ?);

getAllVotes:
SELECT * FROM VotesTable;

getPendingVotes:
SELECT * FROM VotesTable WHERE isPending = 1;

markVoteSynced:
UPDATE VotesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId;


-- Feedback Table Definition
CREATE TABLE FeedbackTable (
    sessionId TEXT NOT NULL PRIMARY KEY,
    feedbackText TEXT NOT NULL,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id)
);

-- Feedback Queries
insertFeedback:
INSERT OR REPLACE INTO FeedbackTable(sessionId, feedbackText)
VALUES (?, ?);

getAllFeedback:
SELECT * FROM FeedbackTable;

getPendingFeedback:
SELECT * FROM FeedbackTable WHERE isPending = 1;

markFeedbackSynced:
UPDATE FeedbackTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId;


-- Favorites Table Definition
CREATE TABLE FavoritesTable (
    sessionId TEXT NOT NULL PRIMARY KEY,
    isFavorite INTEGER NOT NULL DEFAULT 0,
    isPending INTEGER NOT NULL DEFAULT 1,
    lastSyncedTimestamp INTEGER DEFAULT NULL,
    FOREIGN KEY (sessionId) REFERENCES SessionTable(id)
);

-- Favorites Queries
insertFavorite:
INSERT OR REPLACE INTO FavoritesTable(sessionId, isFavorite)
VALUES (?, ?);

getAllFavorites:
SELECT * FROM FavoritesTable;

getPendingFavorites:
SELECT * FROM FavoritesTable WHERE isPending = 1;

markFavoriteSynced:
UPDATE FavoritesTable
SET isPending = 0, lastSyncedTimestamp = :currentTime
WHERE sessionId = :sessionId;


-- Session Table Deletion
deleteCompletedSessions:
DELETE FROM SessionTable
WHERE isPending = 0;

-- Votes Table Deletion
deleteCompletedVotes:
DELETE FROM VotesTable
WHERE isPending = 0;

-- Feedback Table Deletion
deleteCompletedFeedback:
DELETE FROM FeedbackTable
WHERE isPending = 0;

-- Favorites Table Deletion
deleteCompletedFavorites:
DELETE FROM FavoritesTable
WHERE isPending = 0;

-- Conference Speakers Table Deletion
deleteCompletedSpeakers:
DELETE FROM ConferenceSpeakersTable
WHERE isPending = 0;

-- Conference Rooms Table Deletion
deleteCompletedRooms:
DELETE FROM ConferenceRoomsTable
WHERE isPending = 0;

-- Conference Categories Table Deletion
deleteCompletedCategories:
DELETE FROM ConferenceCategoriesTable
WHERE isPending = 0;

-- Session Speakers Junction Table Deletion
deleteCompletedSessionSpeakers:
DELETE FROM SessionSpeakersTable
WHERE isPending = 0;

-- Session Categories Junction Table Deletion
deleteCompletedSessionCategories:
DELETE FROM SessionCategoriesTable
WHERE isPending = 0;

--
-- PODCAST DB
--

--Podcast Channels DB
CREATE TABLE PodcastChannels (
    id INTEGER NOT NULL PRIMARY KEY,
    title TEXT NOT NULL,
    link TEXT NOT NULL,
    description TEXT NOT NULL,
    copyright TEXT,
    language TEXT NOT NULL,
    author TEXT NOT NULL,
    ownerEmail TEXT NOT NULL,
    ownerName TEXT NOT NULL,
    imageUrl TEXT NOT NULL,
    lastBuildDate INTEGER NOT NULL
);

CREATE INDEX channel_id_idx ON PodcastChannels(id);

CREATE TABLE PodcastEpisodes (
    id INTEGER NOT NULL PRIMARY KEY,
    channelId INTEGER NOT NULL,
    guid TEXT NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    link TEXT NOT NULL,
    pubDate INTEGER NOT NULL,
    duration INTEGER NOT NULL,
    explicit INTEGER NOT NULL,
    imageUrl TEXT,
    mediaUrl TEXT NOT NULL,
    mediaType TEXT NOT NULL,
    mediaLength INTEGER NOT NULL
);

CREATE UNIQUE INDEX episodes_guid_idx ON PodcastEpisodes(guid);

CREATE INDEX episodes_channel_idx ON PodcastEpisodes(channelId);
CREATE INDEX episodes_pubDate_idx ON PodcastEpisodes(pubDate);

CREATE TABLE PodcastCategories (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    channelId INTEGER NOT NULL,
    name TEXT NOT NULL
);

CREATE UNIQUE INDEX categories_unique ON PodcastCategories(channelId, name);

-- Upsert or Insert queries for Channels
insertChannel:
INSERT INTO PodcastChannels(
  id, title, link, description, copyright,
  language, author, ownerEmail, ownerName,
  imageUrl, lastBuildDate
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateChannel:
UPDATE PodcastChannels
SET
  title = ?,
  link = ?,
  description = ?,
  copyright = ?,
  language = ?,
  author = ?,
  ownerEmail = ?,
  ownerName = ?,
  imageUrl = ?,
  lastBuildDate = ?
WHERE id = ?;

selectChannelById:
SELECT *
FROM PodcastChannels
WHERE id = ?;

selectAllChannels:
SELECT *
FROM PodcastChannels;

-- Similarly for episodes (partial example)
insertEpisode:
INSERT INTO PodcastEpisodes(
  id, channelId, guid, title, description, link,
  pubDate, duration, explicit, imageUrl, mediaUrl,
  mediaType, mediaLength
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateEpisode:
UPDATE PodcastEpisodes
SET
  channelId = ?,
  guid = ?,
  title = ?,
  description = ?,
  link = ?,
  pubDate = ?,
  duration = ?,
  explicit = ?,
  imageUrl = ?,
  mediaUrl = ?,
  mediaType = ?,
  mediaLength = ?
WHERE id = ?;

selectEpisodesById:
SELECT *
FROM PodcastEpisodes
WHERE id = ?;

selectEpisodesByChannelId:
SELECT *
FROM PodcastEpisodes
WHERE channelId = ?;